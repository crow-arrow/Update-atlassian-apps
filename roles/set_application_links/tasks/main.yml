---
- name: Set jira_instance for Mercedes-Benz
  ansible.builtin.set_fact:
    jira_instance: "{{ instance }}"
  when: domain_root == "mercedes-benz.polygran.de"
  tags: [set_application_links]

- name: Set jira_instance for Daimler Truck
  ansible.builtin.set_fact:
    jira_instance: "dtag-{{ instance }}"
  when: domain_root == "daimlertruck.polygran.de"
  tags: [set_application_links]

- name: Set env_prefix dynamically
  ansible.builtin.set_fact:
    env_prefix: "{{ env ~ '-' if env != 'int' else '' }}"
  when: env_prefix is not defined
  tags: [set_application_links]

- name: Validate required variables
  ansible.builtin.assert:
    that:
      - jira_instance is defined
      - env is defined
      - db_host is defined
      - db_user is defined
      - db_name is defined
      - (app == "jira" and jira_db_password is defined) or (app == "confluence" and confluence_db_password is defined)
      - domain_root is defined
      - env_prefix is defined
    fail_msg: >
      One or more required variables are missing.
      Make sure jira_instance, db_host, db_user, db_name,
      {{ app }}_db_password, env_prefix and domain_root are defined.
  tags: [set_application_links]

- name: Load application links mapping
  ansible.builtin.include_vars:
    file: application_links_map.yml
  tags: [set_application_links]

- name: Set app_links for current Jira instance
  ansible.builtin.set_fact:
    app_links: "{{ application_links_map[jira_instance] | default([]) }}"
  tags: [set_application_links]

- name: Fail if no app_links found for {{ jira_instance }}
  ansible.builtin.fail:
    msg: "No application links defined for {{ jira_instance }} in application_links_map.yml"
  when: app_links | length == 0
  tags: [set_application_links]

- name: Render SQL file for updating application links
  ansible.builtin.template:
    src: update_application_links.sql.j2
    dest: /tmp/update_application_links.sql
    mode: "0644"
  tags: [set_application_links]

- name: Apply SQL file to {{ db_name }} database
  ansible.builtin.shell: |
    psql -h {{ db_host }} -U {{ db_user }} -d {{ db_name }} -f /tmp/update_application_links.sql
  environment:
    PGPASSWORD: "{{ (app == 'jira') | ternary(jira_db_password, confluence_db_password) }}"
  become: true
  become_user: "{{ ENV_USER }}"
  register: set_app_links_result
  when: app_links | length > 0
  tags: [set_application_links]

- name: Show summary of updated links
  ansible.builtin.debug:
    msg: |
      âœ… Updated application links for {{ jira_instance }}:
      {{ app_links | join(', ') }}
  tags: [set_application_links]

- name: Remove temporary SQL file
  ansible.builtin.file:
    path: /tmp/update_application_links.sql
    state: absent
  when: set_app_links_result is defined
  ignore_errors: true
  tags: [set_application_links]
