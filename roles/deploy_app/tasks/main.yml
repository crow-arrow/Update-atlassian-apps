---
- name: Fail early if required variables are not defined
  fail:
    msg: "Missing required variable: {{ item }}"
  when: hostvars[inventory_hostname][item] is not defined
  loop:
    - app
    - instance
    - env
    - app_base
    - app_data_base
    - upload_dir
  tags: [deploy]

- name: Set paths
  set_fact:
    app_path: "{{ app_base }}/{{ env }}/{{ app }}/{{ instance }}"
    app_data_path: "{{ app_data_base }}/{{ env }}/{{ app }}/{{ instance }}"
    app_backup_path: "{{ app_base }}/{{ env }}/{{ app }}/{{ instance }}_backup"
    app_data_backup_path: "{{ app_data_base }}/{{ env }}/{{ app }}/{{ instance }}_backup"
  tags: [deploy]

- name: Ensure instance directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ app_path }}"
    - "{{ app_path }}/conf"
    - "{{ app_path }}/bin"
    - "{{ app_path }}/atlassian-jira/WEB-INF/classes"
    - "{{ app_data_path }}"
  tags: [deploy]

- name: Unpack appdata.tgz
  unarchive:
    src: "{{ upload_dir }}/{{ current_date }}_{{ instance }}_appdata.tgz"
    dest: "{{ app_path }}"
    remote_src: yes
  tags: [deploy]

- name: Unpack homedir.tgz
  unarchive:
    src: "{{ upload_dir }}/{{ current_date }}_{{ instance }}_homedir.tgz"
    dest: "{{ app_data_path }}"
    remote_src: yes
  tags: [deploy]

- name: Restore config files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
    mode: preserve
  loop:
    - { src: "{{ app_data_backup_path }}/dbconfig.xml", dest: "{{ app_data_path }}/dbconfig.xml" }
    - { src: "{{ app_data_backup_path }}/eazybi.toml", dest: "{{ app_data_path }}/eazybi.toml" }
    - { src: "{{ app_backup_path }}/server.xml", dest: "{{ app_path }}/conf/server.xml" }
    - { src: "{{ app_backup_path }}/setenv.sh", dest: "{{ app_path }}/bin/setenv.sh" }
    - { src: "{{ app_backup_path }}/jira-application.properties.bak", dest: "{{ app_path }}/atlassian-jira/WEB-INF/classes/jira-application.properties" }
    - { src: "{{ app_data_backup_path }}/secrets-config.yaml", dest: "{{ app_data_path }}/secrets-config.yaml" }
  tags: [deploy]

- name: Restore secured directory
  copy:
    src: "{{ app_data_backup_path }}/secured/"
    dest: "{{ app_data_path }}/secured/"
    remote_src: yes
    mode: preserve
  tags: [deploy]

- name: Restore keys directory
  copy:
    src: "{{ app_data_backup_path }}/keys/"
    dest: "{{ app_data_path }}/keys/"
    remote_src: yes
    mode: preserve
  tags: [deploy]

- name: Find all cache contents
  ansible.builtin.find:
    paths:
      - "{{ app_data_path }}/caches/indexesV2"
      - "{{ app_data_path }}/caches/tmp_attachments"
    file_type: any
    recurse: yes
  register: cache_items
  failed_when: false
  tags: [deploy]

- name: Remove cache contents
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ cache_items.files }}"
  when: cache_items.matched > 0
  failed_when: false
  tags: [deploy]

- name: Ensure indexesV2 exists
  file:
    path: "{{ app_data_path }}/caches/indexesV2"
    state: directory
    owner: "{{ app }}"
    group: polygran
    mode: '0755'

- name: Ensure tmp_attachments exists
  file:
    path: "{{ app_data_path }}/caches/tmp_attachments"
    state: directory
    owner: "{{ app }}"
    group: polygran
    mode: '0755'

- name: Remove uploaded archive files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ upload_dir }}/{{ current_date }}_{{ instance }}_appdata.tgz"
    - "{{ upload_dir }}/{{ current_date }}_{{ instance }}_homedir.tgz"
  failed_when: false
  tags: [deploy]

- name: Remove entire backup directories (optional, set REMOVE_BACKUPS=true)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ app_backup_path }}"
    - "{{ app_data_backup_path }}"
  failed_when: false
  when: REMOVE_BACKUPS | default(false) | bool
  tags: [deploy]
