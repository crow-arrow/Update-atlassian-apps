- name: Set timestamp fact
  set_fact:
    now: "{{ ansible_date_time.date | regex_replace('-', '') }}"

- name: Set homedir archive path
  set_fact:
    homedir_archive: "{{ snapshot_dir }}/{{ now }}_{{ instance }}_homedir.tgz"

- name: Check current user on managed host
  ansible.builtin.command: whoami
  register: whoami_result

- name: Show executing user
  debug:
    msg: "Current user: {{ whoami_result.stdout }}"

- name: Dump PostgreSQL DB using Ansible module
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    state: dump
    target: "{{ snapshot_dir }}/{{ now }}_{{ instance }}.dump"
    login_host: "{{ db_host }}"
    login_port: "{{ db_port | default(5432) }}"
    login_user: "{{ db_user }}"
    login_password: >-
      {{ (app == 'jira') | ternary(jira_db_password, confluence_db_password) }}
  become: true
  become_user: "{{ ENV_USER }}"

- name: Find first-level attachment subdirs (excluding 'insight')
  find:
    paths: "{{ application_data_home }}/data/attachments"
    file_type: directory
    recurse: no
    patterns: '*'
    excludes: insight
  register: attachment_dirs
  ignore_errors: true

- name: Render exclude-from file
  template:
    src: excl_attachments.txt.j2
    dest: "{{ snapshot_dir }}/excl_attachments.txt"
  when: attachment_dirs.files | length > 1

- name: Create homedir archive
  shell: |
    tar \
      --exclude='./caches/*' \
      --exclude='./data/backbone-issue-sync/*' \
      --exclude-from='{{ snapshot_dir }}/excl_attachments.txt' \
      --exclude='./data/git-plugin/*' \
      --exclude='./eazybi.toml' \
      --exclude='./export/*' \
      --exclude='./import/*' \
      --exclude='./log/*' \
      --exclude='./tmp/*' \
      --exclude='{{ homedir_archive | basename }}' \
      --ignore-failed-read \
      -zcvf '{{ homedir_archive }}' .
  args:
    chdir: "{{ application_data_home }}"
  when: attachment_dirs.files | length > 1
  become: true
  become_user: "{{ ENV_USER }}"

- name: Remove temporary exclude-from file
  file:
    path: "{{ snapshot_dir }}/excl_attachments.txt"
    state: absent
  when: attachment_dirs.files | length > 1

- name: Check if attachments directory exists
  ansible.builtin.stat:
    path: "{{ application_data_home }}/data/attachments"
  register: attachments_dir_status

- name: Set permissions on attachment directories (fast)
  ansible.builtin.command: >
    find {{ application_data_home }}/data/attachments -type d -print0 |
    xargs -0 chmod 0750
  when: attachments_dir_status.stat.exists
  become: true
  become_user: "{{ ENV_USER }}"

- name: Set permissions on attachment files (fast)
  ansible.builtin.command: >
    find {{ application_data_home }}/data/attachments -type f -print0 |
    xargs -0 chmod 0640
  when: attachments_dir_status.stat.exists
  become: true
  become_user: "{{ ENV_USER }}"

- name: Create appdata archive
  shell: |
    tar \
      --exclude='./temp/*' \
      --exclude='./logs/*' \
      --exclude='./work/*' \
      -zcvf '{{ snapshot_dir }}/{{ now }}_{{ instance }}_appdata.tgz' .
  args:
    chdir: "{{ app_base }}/{{ app }}"
  become: true
  become_user: "{{ ENV_USER }}"

- name: Find old snapshots
  find:
    paths: "{{ snapshot_dir }}"
    patterns: "{{ instance }}_*"
    age: 365d
    recurse: no
  register: old_snapshots

- name: Remove old snapshots
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ old_snapshots.files }}"
  when: old_snapshots.matched > 0
