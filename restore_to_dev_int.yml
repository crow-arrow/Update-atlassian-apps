---
- name: Archive and transfer app snapshots from production
  # hosts: "{{ app }}"
  hosts: "{{ instance }}"
  become: true
  become_user: "{{ ENV_USER }}"
  gather_facts: true

  vars:
    now: "{{ lookup('pipe', 'date +%Y%m%d') }}"

  vars_files:
    - inventories/production/group_vars/pilot-aftersales/vault.yml

  pre_tasks:
    - name: Validate survey var
      ansible.builtin.assert:
        that:
          - app is defined
          - app in ['jira', 'confluence']

  tasks:

    - name: Create application snapshot
      import_role:
        name: snapshot_app
      tags: [snapshot]
      
- name: Restore app to {{ env }} environment
  hosts: "{{ instance }}-{{ env }}"
  become: true
  become_user: "{{ ENV_USER }}"
  gather_facts: true

  vars:
    now: "{{ lookup('pipe', 'date +%Y%m%d') }}"

  vars_files:
    - "inventories/{{ env }}/group_vars/{{ instance }}/vault.yml"

  tasks:

    - name: Set timestamp fact
      ansible.builtin.set_fact:
        now: "{{ ansible_date_time.date | regex_replace('-', '') }}"

    - name: Stop application service
      import_role:
        name: service_control
      vars:
        service_action: stop

    - name: Backup current config before deployment
      import_role:
        name: backup_config
      tags: [backup]

    - name: Push archives to target host
      import_role:
        name: push_archives
      tags: [push]

    - name: Clean up previous instance files
      import_role:
        name: cleanup_app
      tags: [cleanup]

    - name: Deploy new version from archives
      import_role:
        name: deploy_app
      tags: [deploy]

    - name: Restore database (Jira only)
      import_role:
        name: db_restore_jira
      when: app == "jira"
      tags: [restore]

    - name: Restore database (Confluence only)
      import_role:
        name: db_restore_confluence
      when: app == "confluence"
      tags: [restore]

    - name: Start application service
      import_role:
        name: service_control
      vars:
        service_action: start

    #- name: Trigger Jira reindex
     # import_tasks: roles/configure_jira_instance/tasks/reindex.yml
     # when: app == "jira"
     # tags: [reindex]

