---
- name: Restore app to {{ env }} environment
  hosts: "{{ instance }}"
  become: true
  become_user: "{{ ENV_USER }}"
  gather_facts: true

  vars:
    now: "{{ lookup('pipe', 'date +%Y%m%d') }}"

  vars_files:
    - inventories/int/group_vars/vault.yml

  tasks:

    - name: Set timestamp fact
      ansible.builtin.set_fact:
        now: "{{ ansible_date_time.date | regex_replace('-', '') }}"

    - name: Принудительно получить effective user
      command: whoami
      register: whoami_output
      become: true
      become_user: "{{ USER }}"

    - name: Проверить кто выполняет задачу
      debug:
        msg: "Фактически используемый пользователь: {{ whoami_output.stdout }}"

    - name: Проверить соответствие пользователю
      assert:
        that:
          - whoami_output.stdout == USER
        fail_msg: "Ожидали пользователя {{ USER }}, но получили {{ whoami_output.stdout }}"

    - name: Stop application service
      import_role:
        name: service_control
      vars:
        service_action: stop

    - name: Backup current config before deployment
      import_role:
        name: backup_config
      tags: [backup]

    - name: Push archives to target host
      import_role:
        name: push_archives
      tags: [push]

    - name: Clean up previous instance files
      import_role:
        name: cleanup_app
      tags: [cleanup]

    - name: Deploy new version from archives
      import_role:
        name: deploy_app
      tags: [deploy]

    - name: Restore database (Jira only)
      import_role:
        name: db_restore_jira
      when: app == "jira"
      tags: [restore]

    - name: Restore database (Confluence only)
      import_role:
        name: db_restore_confluence
      when: app == "confluence"
      tags: [restore]

    - name: Убедиться, что используемый пользователь — нужный
      assert:
        that:
          - ansible_effective_user == USER
        fail_msg: "Неправильный пользователь: должен быть {{ USER }}"

    - name: Start application service
      import_role:
        name: service_control
      vars:
        service_action: start

    #- name: Trigger Jira reindex
     # import_tasks: roles/configure_jira_instance/tasks/reindex.yml
     # when: app == "jira"
     # tags: [reindex]

