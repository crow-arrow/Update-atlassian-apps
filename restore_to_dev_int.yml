---
- name: Archive and transfer app snapshots from production
  hosts: "{{ instance }}"
  become: true
  become_user: "{{ ENV_USER }}"
  gather_facts: true

  vars:
    current_date: "{{ lookup('pipe', 'date +%Y%m%d') }}"

  vars_files:
    - inventories/production/group_vars/{{ instance }}/vault.yml

  pre_tasks:
    - name: Validate critical vars for snapshot_app role
      ansible.builtin.assert:
        that:
          - app is defined
          - app in ['jira', 'confluence']
          - instance is defined
          - snapshot_dir is defined
          - ENV_USER is defined
          - GROUP is defined
          - application_data_home is defined
          - db_host is defined
          - db_user is defined
          - db_name is defined
          - (app == 'jira' and jira_db_password is defined) or (app == 'confluence' and confluence_db_password is defined)
          - app_base is defined
          - snapshot_expiry_age is defined
        fail_msg: "Missing or invalid required variable(s) for snapshot_app role"
        success_msg: "All required variables for snapshot_app are present."

  tasks:

    - name: Create application snapshot
      import_role:
        name: snapshot_app
      tags: [snapshot]
      
- name: Restore app to {{ env }} environment
  hosts: "{{ instance }}-{{ env }}"
  become: true
  become_user: "{{ ENV_USER }}"
  gather_facts: true

  vars:
    current_date: "{{ lookup('pipe', 'date +%Y%m%d') }}"

  vars_files:
    - "inventories/{{ env }}/group_vars/{{ instance }}/vault.yml"

  pre_tasks:
  - name: Validate restore input vars
    ansible.builtin.assert:
      that:
        - app is defined
        - app in ['jira', 'confluence']
        - instance is defined
        - env is defined
        - ENV_USER is defined
        - INCLUDE_ATTACHMENTS is not none
      fail_msg: "Missing or invalid required variable(s) for restore process"

  tasks:

    - name: Set timestamp fact
      ansible.builtin.set_fact:
        current_date: "{{ ansible_date_time.date | regex_replace('-', '') }}"

    - name: Stop application service
      import_role:
        name: service_control
      vars:
        service_action: stop
      tags: [service_control]

    - name: Backup current config before deployment
      import_role:
        name: backup_config_jira
      tags: [backup_jira]

    - name: Push archives to target host
      import_role:
        name: push_archives
      vars:
        push_action: push
      tags: [push]

    - name: Clean up previous instance files
      import_role:
        name: cleanup_app
      tags: [cleanup]

    - name: Deploy new version from archives
      import_role:
        name: deploy_app
      tags: [deploy]

    - name: Sync attachments
      import_role:
        name: sync_attachments
      when: INCLUDE_ATTACHMENTS | default(false) | bool
      tags: [sync_attachments]

    - name: Restore database (Jira only)
      import_role:
        name: db_restore_jira
      when: app == "jira"
      tags: [restore]

    - name: Restore database (Confluence only)
      import_role:
        name: db_restore_confluence
      when: app == "confluence"
      tags: [restore]

    - name: Disable Jira plugins
      import_role:
        name: disable_plugins_jira
      when: app == "jira"
      tags: [disable_plugins]

    - name: Remove *mbb-permission-manager* Plugin
      import_role:
        name: remove_plugins_jira
      when: app == "jira" and instance == "mbb-jira"
      tags: [mbb-permission-manager]
      
    - name: Set base URL
      import_role:
        name: set_base_url
      tags: [set_base_url]
    
    - name: Set Application Links
      import_role:
        name: set_application_links
      when: app == "jira"
      tags: [set_application_links]

    - name: Set banner
      import_role:
        name: set_banner
      tags: [set_banner]

    - name: Start application service
      import_role:
        name: service_control
      vars:
        service_action: start
      tags: [service_control]

    - name: Remove archives and key
      import_role:
        name: push_archives
      vars:
        push_action: remove
      tags: [push]


